[{"/Users/ishansengupta/Desktop/cubic-move/src/index.js":"1","/Users/ishansengupta/Desktop/cubic-move/src/App.js":"2","/Users/ishansengupta/Desktop/cubic-move/src/Scene.js":"3","/Users/ishansengupta/Desktop/cubic-move/src/shaders/vertex.js":"4","/Users/ishansengupta/Desktop/cubic-move/src/shaders/fragment.js":"5","/Users/ishansengupta/Desktop/cubic-move/src/Cursor.js":"6"},{"size":157,"mtime":1609886432914,"results":"7","hashOfConfig":"8"},{"size":845,"mtime":1609886030944,"results":"9","hashOfConfig":"8"},{"size":7181,"mtime":1609898735605,"results":"10","hashOfConfig":"8"},{"size":3487,"mtime":1609876415101,"results":"11","hashOfConfig":"8"},{"size":1697,"mtime":1609876415101,"results":"12","hashOfConfig":"8"},{"size":13588,"mtime":1609899963780,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"36j6q0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ishansengupta/Desktop/cubic-move/src/index.js",[],["29","30"],"/Users/ishansengupta/Desktop/cubic-move/src/App.js",["31","32"],"/Users/ishansengupta/Desktop/cubic-move/src/Scene.js",["33","34"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\nimport gsap from \"gsap\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\n\nclass Font extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      paused: true,\n      isRunning: false,\n\n      data: {\n        distortion: 0.0,\n        bloomStrength: 0.5,\n      },\n    };\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n  \n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      this.width / this.height,\n      0.01,\n      100\n    );\n    this.camera.lookAt(new THREE.Vector3());\n    this.camera.position.set(0, 0, 100);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addPost();\n    this.addObjects();\n    this.animate();\n\n    this.resize();\n  }\n\n  addPost() {\n    this.renderScene = new RenderPass(this.scene, this.camera);\n\n    this.bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      1.0,\n      0.4,\n      0.65\n    );\n\n    this.bloomPass.threshold = this.state.data.bloomThreshold;\n    this.bloomPass.strength = this.state.data.bloomStrength;\n    this.bloomPass.radius = this.state.data.bloomRadius;\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(this.renderScene);\n    this.composer.addPass(this.bloomPass);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    /*    let meshes = [];\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        let m = this.material.clone();\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), m);\n        \n        mesh.position.x = i*1.1-5;\n        mesh.position.z = j*1.1-5;\n        meshes.push(mesh.scale)\n        this.scene.add(mesh);\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = 0.1\n      }\n    }\n\n    this.scene.add(new THREE.AmbientLight('#59314f'))\n\n    const light  = new THREE.PointLight('#45caf7',1,15.5)\n    light.position.set(2,2,-4).multiplyScalar(1.5)\n    this.scene.add(light);\n\n    let t1 = gsap.timeline({repeat: -1,\n    repeatDelay: 0\n    })\n\n    t1.to(meshes, {\n      duration: 1,\n      x: 1,\n      y: 1,\n      z: 1,\n      yoyo: true,\n      stagger: {\n        grid: [10,10],\n        from: 'center',\n        amount: 1.5\n      }\n    }) */\n\n    let count = 2 * 15;\n\n    let geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n\n    this.mesh = new THREE.InstancedMesh(geometry, this.material, count ** 3);\n\n    let random = new Float32Array(count ** 3);\n    let depth = new Float32Array(count ** 3);\n    let pos = new Float32Array(3 * count ** 3);\n\n    let transform = new THREE.Object3D();\n\n    let jj = 0;\n    let ii = 0;\n    for (let i = 0; i < count; i++) {\n      for (let j = 0; j < count; j++) {\n        for (let k = 0; k < count; k++) {\n          transform.position.set(i - count / 2, j - count / 2, k - count / 2);\n          transform.updateMatrix();\n          random[ii] = Math.random();\n          depth[ii] = j / count;\n          pos[jj] = i / count;\n          jj++;\n          pos[jj] = j / count;\n          jj++;\n          pos[jj] = k / count;\n          jj++;\n\n          this.mesh.setMatrixAt(ii++, transform.matrix);\n        }\n      }\n    }\n\n    geometry.setAttribute(\n      \"random\",\n      new THREE.InstancedBufferAttribute(random, 1)\n    );\n\n    geometry.setAttribute(\n      \"depth\",\n      new THREE.InstancedBufferAttribute(depth, 1)\n    );\n\n    geometry.setAttribute(\"pos\", new THREE.InstancedBufferAttribute(pos, 3));\n\n    this.scene.add(this.mesh);\n\n\nconst color = \"#45caf7\";\nconst density = 0.01;\nthis.scene.fog = new THREE.FogExp2(color, density);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    \n    this.material.uniforms.time.value = this.time;\n    this.mesh.rotation.x = this.time * this.props.angle.current.spin / 8\n    this.mesh.rotation.y = this.time * this.props.angle.current.spin /8\n    this.camera.position.z = this.props.angle.current.value\n    this.frameId = requestAnimationFrame(this.animate);\n\n    //this.renderScene();\n    this.composer.render();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Font;\n","/Users/ishansengupta/Desktop/cubic-move/src/shaders/vertex.js",[],"/Users/ishansengupta/Desktop/cubic-move/src/shaders/fragment.js",[],["35","36"],"/Users/ishansengupta/Desktop/cubic-move/src/Cursor.js",["37","38","39","40","41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":21,"column":11,"nodeType":"53","endLine":21,"endColumn":47},{"ruleId":"47","severity":1,"message":"54","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":12},{"ruleId":"47","severity":1,"message":"55","line":86,"column":9,"nodeType":"49","messageId":"50","endLine":86,"endColumn":13},{"ruleId":"43","replacedBy":"56"},{"ruleId":"45","replacedBy":"57"},{"ruleId":"51","severity":1,"message":"52","line":11,"column":9,"nodeType":"53","endLine":17,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":39,"column":9,"nodeType":"53","endLine":45,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":58,"column":9,"nodeType":"53","endLine":64,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":77,"column":9,"nodeType":"53","endLine":83,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":383,"column":13,"nodeType":"53","endLine":389,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":423,"column":13,"nodeType":"53","endLine":429,"endColumn":14},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Cursor' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'gsap' is defined but never used.","'that' is assigned a value but never used.",["58"],["59"],"no-global-assign","no-unsafe-negation"]